version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cms_db
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: cms_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/init:/docker-entrypoint-initdb.d
    networks:
      - cms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cms_user -d cms_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cms-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass cms_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cms-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend Server
  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
      target: development
    container_name: cms-server
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://cms_user:cms_password@postgres:5432/cms_db
      - REDIS_URL=redis://:cms_redis_password@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/server:/app
      - /app/node_modules
      - ./packages:/packages
      - server_uploads:/app/uploads
    networks:
      - cms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: apps/client/Dockerfile
      target: development
    container_name: cms-client
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      - server
    volumes:
      - ./apps/client:/app
      - /app/node_modules
      - /app/.next
      - ./packages:/packages
    networks:
      - cms-network

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cms-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cms-platform.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - cms-network
    depends_on:
      - postgres

  # Redis Admin (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: cms-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - cms-network
    depends_on:
      - redis

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local
  server_uploads:
    driver: local

# Networks
networks:
  cms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
