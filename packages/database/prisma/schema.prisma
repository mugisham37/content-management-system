// =============================================================================
// PRISMA SCHEMA - ENTERPRISE CMS DATABASE
// =============================================================================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER MANAGEMENT
// =============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  
  // Authentication
  password     String?
  emailVerified DateTime?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  
  // Role-based access control
  role   UserRole @default(USER)
  roleId String?
  roleModel Role? @relation(fields: [roleId], references: [id])
  
  // OAuth providers
  accounts Account[]
  sessions Session[]
  
  // CMS Relations
  posts         Post[]
  comments      Comment[]
  media         Media[]
  categories    Category[]
  tags          Tag[]
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
  
  // Soft delete
  deletedAt DateTime?
  
  @@map("users")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[]
  users       User[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String // e.g., "posts", "users", "media"
  action      String // e.g., "create", "read", "update", "delete"
  
  roles Role[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([resource, action])
  @@map("permissions")
}

// =============================================================================
// AUTHENTICATION
// =============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =============================================================================
// CONTENT MANAGEMENT
// =============================================================================

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String      @db.Text
  status      PostStatus  @default(DRAFT)
  type        PostType    @default(POST)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Publishing
  publishedAt DateTime?
  scheduledAt DateTime?
  
  // Relations
  authorId     String
  author       User       @relation(fields: [authorId], references: [id])
  categories   Category[]
  tags         Tag[]
  comments     Comment[]
  media        Media[]
  
  // Featured content
  featuredImage   String?
  isFeatured      Boolean @default(false)
  isSticky        Boolean @default(false)
  
  // Analytics
  viewCount    Int @default(0)
  likeCount    Int @default(0)
  shareCount   Int @default(0)
  commentCount Int @default(0)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
  
  // Soft delete
  deletedAt DateTime?
  
  @@map("posts")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String?
  icon        String?
  
  // Hierarchy
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  // Relations
  posts Post[]
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display
  isVisible Boolean @default(true)
  sortOrder Int     @default(0)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
  
  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  @@map("categories")
}

model Tag {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String?
  
  // Relations
  posts Post[]
  
  // Usage stats
  usageCount Int @default(0)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
  
  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  @@map("tags")
}

model Comment {
  id      String        @id @default(cuid())
  content String        @db.Text
  status  CommentStatus @default(PENDING)
  
  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  
  // Hierarchy (replies)
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  // Moderation
  isApproved Boolean @default(false)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

// =============================================================================
// MEDIA MANAGEMENT
// =============================================================================

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  thumbnailUrl String?
  
  // Metadata
  width       Int?
  height      Int?
  duration    Int? // for videos
  alt         String?
  caption     String?
  description String?
  
  // Organization
  folder   String?
  tags     String[] // Array of tags for organization
  
  // Relations
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  posts        Post[]
  
  // Storage
  storageProvider String @default("local") // local, s3, cloudinary, etc.
  storageKey      String?
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Soft delete
  deletedAt DateTime?
  
  @@map("media")
}

// =============================================================================
// SYSTEM SETTINGS
// =============================================================================

model Setting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String      @db.Text
  type        SettingType @default(STRING)
  group       String      @default("general")
  description String?
  isPublic    Boolean     @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}

// =============================================================================
// AUDIT LOG
// =============================================================================

model AuditLog {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource   String   // users, posts, media, etc.
  resourceId String?
  userId     String?
  userEmail  String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?    // Additional context data
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  AUTHOR
  CONTRIBUTOR
  USER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
  TRASH
}

enum PostType {
  POST
  PAGE
  PRODUCT
  EVENT
  CUSTOM
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  TEXT
}

// =============================================================================
// INDEXES FOR PERFORMANCE
// =============================================================================

// User indexes
// @@index([email])
// @@index([username])
// @@index([isActive])
// @@index([createdAt])

// Post indexes
// @@index([slug])
// @@index([status])
// @@index([type])
// @@index([publishedAt])
// @@index([authorId])
// @@index([createdAt])
// @@index([isFeatured])

// Category indexes
// @@index([slug])
// @@index([parentId])
// @@index([isVisible])

// Tag indexes
// @@index([slug])
// @@index([usageCount])

// Comment indexes
// @@index([postId])
// @@index([authorId])
// @@index([status])
// @@index([createdAt])

// Media indexes
// @@index([uploadedById])
// @@index([mimeType])
// @@index([createdAt])

// Audit log indexes
// @@index([action])
// @@index([resource])
// @@index([userId])
// @@index([createdAt])
