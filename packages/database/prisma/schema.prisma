// =============================================================================
// ENTERPRISE CMS DATABASE SCHEMA - POSTGRESQL
// =============================================================================
// High-performance, multi-tenant content management system
// Translated and enhanced from MongoDB models to PostgreSQL

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), pg_trgm]
}

// =============================================================================
// TENANT MANAGEMENT (Multi-tenant Architecture)
// =============================================================================

model Tenant {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  slug        String      @unique
  description String?
  plan        TenantPlan  @default(FREE)
  status      TenantStatus @default(ACTIVE)
  
  // Usage limits and tracking
  usageLimits Json        @default("{\"maxUsers\": 3, \"maxStorage\": 100, \"maxContentTypes\": 5, \"maxContents\": 100, \"maxApiRequests\": 1000, \"maxWebhooks\": 2, \"maxWorkflows\": 1}")
  currentUsage Json       @default("{\"users\": 1, \"storage\": 0, \"contentTypes\": 0, \"contents\": 0, \"apiRequests\": 0, \"webhooks\": 0, \"workflows\": 0}")
  
  // Settings and customization
  settings Json          @default("{\"defaultLocale\": \"en\", \"supportedLocales\": [\"en\"], \"timezone\": \"UTC\", \"dateFormat\": \"YYYY-MM-DD\", \"timeFormat\": \"HH:mm:ss\", \"currency\": \"USD\"}")
  securitySettings Json  @default("{\"mfaRequired\": false, \"passwordPolicy\": {\"minLength\": 8}, \"sessionTimeout\": 60}")
  customBranding Json?
  
  // Billing information
  billingInfo Json?
  customDomain String?
  
  // Relations
  users         User[]
  contentTypes  ContentType[]
  contents      Content[]
  media         Media[]
  apiKeys       ApiKey[]
  webhooks      Webhook[]
  workflows     Workflow[]
  routes        Route[]
  translations  Translation[]
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tenants")
  @@index([slug])
  @@index([status])
  @@index([plan])
}

// =============================================================================
// USER MANAGEMENT & AUTHENTICATION
// =============================================================================

model User {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String
  firstName String
  lastName  String
  avatar    String?
  
  // Authentication
  password            String
  emailVerified       Boolean   @default(false)
  emailVerificationToken String?
  passwordResetToken  String?
  passwordResetExpires DateTime?
  
  // Status and activity
  status      UserStatus @default(PENDING)
  isActive    Boolean    @default(true)
  lastLoginAt DateTime?
  loginAttempts Int      @default(0)
  lockUntil   DateTime?
  
  // Role and permissions
  role UserRole @default(VIEWER)
  
  // User preferences
  preferences Json @default("{}")
  
  // Multi-tenant relationship
  tenantId String? @db.Uuid
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // OAuth providers
  accounts Account[]
  sessions Session[]
  
  // Content relations
  createdContents     Content[] @relation("ContentCreator")
  updatedContents     Content[] @relation("ContentUpdater")
  publishedContents   Content[] @relation("ContentPublisher")
  createdContentTypes ContentType[] @relation("ContentTypeCreator")
  uploadedMedia       Media[]
  createdApiKeys      ApiKey[]
  workflowStepEntries WorkflowStepEntry[] @relation("StepAssignee")
  completedSteps      WorkflowStepEntry[] @relation("StepCompleter")
  
  // Content version relations
  createdVersions     ContentVersion[] @relation("VersionCreator")
  publishedVersions   ContentVersion[] @relation("VersionPublisher")
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdJobs Job[] @relation("JobCreator")
  
  @@unique([email, tenantId])
  @@map("users")
  @@index([email])
  @@index([tenantId])
  @@index([status])
  @@index([role])
  @@index([isActive])
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =============================================================================
// API KEY MANAGEMENT
// =============================================================================

model ApiKey {
  id         String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String
  key        String        @unique
  scopes     ApiKeyScope[]
  expiresAt  DateTime?
  lastUsedAt DateTime?
  isActive   Boolean       @default(true)
  
  // Relations
  createdById String  @db.Uuid
  createdBy   User    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  tenantId    String? @db.Uuid
  tenant      Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([name, tenantId])
  @@map("api_keys")
  @@index([key])
  @@index([tenantId])
  @@index([isActive])
}

// =============================================================================
// DYNAMIC CONTENT TYPE SYSTEM
// =============================================================================

model ContentType {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  displayName String
  description String?
  isSystem    Boolean @default(false)
  
  // Dynamic field definitions stored as JSONB
  fields Json @default("[]")
  
  // Relations
  contents  Content[]
  workflows Workflow[]
  
  // Multi-tenant
  tenantId String? @db.Uuid
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdById String? @db.Uuid
  createdBy   User?   @relation("ContentTypeCreator", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([name, tenantId])
  @@map("content_types")
  @@index([tenantId])
  @@index([isSystem])
}

// =============================================================================
// DYNAMIC CONTENT SYSTEM WITH VERSIONING
// =============================================================================

model Content {
  id     String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  data   Json          // Dynamic content data stored as JSONB
  status ContentStatus @default(DRAFT)
  locale String        @default("en")
  slug   String?
  
  // Publishing
  publishedAt DateTime?
  publishedById String? @db.Uuid
  publishedBy   User?   @relation("ContentPublisher", fields: [publishedById], references: [id])
  
  // Relations
  contentTypeId String      @db.Uuid
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Versioning - both JSONB array for performance and separate model for advanced operations
  versions Json @default("[]")
  contentVersions ContentVersion[]
  
  // Multi-tenant
  tenantId String? @db.Uuid
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Workflow
  workflowEntries WorkflowEntry[]
  
  // Audit fields
  createdById String? @db.Uuid
  createdBy   User?   @relation("ContentCreator", fields: [createdById], references: [id])
  updatedById String? @db.Uuid
  updatedBy   User?   @relation("ContentUpdater", fields: [updatedById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([contentTypeId, slug, locale])
  @@map("contents")
  @@index([contentTypeId])
  @@index([status])
  @@index([locale])
  @@index([tenantId])
  @@index([publishedAt])
  @@index([slug])
}

// =============================================================================
// CONTENT VERSIONING SYSTEM
// =============================================================================

model ContentVersion {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  version Int
  data    Json   // Snapshot of content data at this version
  status  ContentVersionStatus @default(DRAFT)
  notes   String?
  
  // Publishing information
  publishedAt DateTime?
  publishedById String? @db.Uuid
  publishedBy   User?   @relation("VersionPublisher", fields: [publishedById], references: [id])
  
  // Relations
  contentId String  @db.Uuid
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdById String? @db.Uuid
  createdBy   User?   @relation("VersionCreator", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  
  @@unique([contentId, version])
  @@map("content_versions")
  @@index([contentId])
  @@index([status])
  @@index([version])
  @@index([createdAt])
}

// =============================================================================
// FIELD TYPE DEFINITIONS
// =============================================================================

model FieldType {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String        @unique
  displayName String
  description String?
  dataType    FieldDataType
  uiType      FieldUIType
  isSystem    Boolean       @default(false)
  isBuiltIn   Boolean       @default(false)
  
  // Validation rules and settings
  validations Json @default("[]")
  settings    Json @default("{}")
  
  // Plugin relation
  pluginId String? @db.Uuid
  plugin   Plugin? @relation(fields: [pluginId], references: [id])
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("field_types")
  @@index([dataType])
  @@index([isSystem])
  @@index([isBuiltIn])
}

// =============================================================================
// MEDIA MANAGEMENT
// =============================================================================

model Media {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  filename     String    @unique
  originalName String
  path         String
  url          String
  type         MediaType
  
  // Explicit fields for better type safety
  mimeType     String
  size         Int
  width        Int?
  height       Int?
  duration     Int?
  
  // Metadata stored as JSONB for additional flexible data
  metadata Json @default("{}")
  
  // Organization
  alt     String?
  caption String?
  tags    String[] @default([])
  
  // Relations
  uploadedById String  @db.Uuid
  uploadedBy   User    @relation(fields: [uploadedById], references: [id])
  tenantId     String? @db.Uuid
  tenant       Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("media")
  @@index([type])
  @@index([mimeType])
  @@index([size])
  @@index([tenantId])
  @@index([uploadedById])
  @@index([tags])
  @@index([createdAt])
}

// =============================================================================
// WORKFLOW MANAGEMENT
// =============================================================================

model Workflow {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  isDefault   Boolean @default(false)
  
  // Workflow steps stored as JSONB
  steps Json @default("[]")
  
  // Relations
  contentTypes String[] @db.Uuid
  contentTypeRefs ContentType[]
  entries      WorkflowEntry[]
  
  // Multi-tenant
  tenantId String? @db.Uuid
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("workflows")
  @@index([isDefault])
  @@index([tenantId])
}

model WorkflowEntry {
  id          String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status      WorkflowEntryStatus @default(IN_PROGRESS)
  currentStep String?             @db.Uuid
  
  // Relations
  workflowId String   @db.Uuid
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  contentId  String   @db.Uuid
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  // Step entries
  steps WorkflowStepEntry[]
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("workflow_entries")
  @@index([workflowId])
  @@index([contentId])
  @@index([status])
}

model WorkflowStepEntry {
  id          String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  stepId      String              @db.Uuid
  status      WorkflowEntryStatus @default(IN_PROGRESS)
  comments    String?
  completedAt DateTime?
  
  // Relations
  entryId String        @db.Uuid
  entry   WorkflowEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  
  assignedTo   String[] @db.Uuid
  assignedUsers User[]  @relation("StepAssignee")
  
  completedById String? @db.Uuid
  completedBy   User?   @relation("StepCompleter", fields: [completedById], references: [id])
  
  // Audit fields
  createdAt DateTime @default(now())
  
  @@map("workflow_step_entries")
  @@index([entryId])
  @@index([stepId])
  @@index([status])
}

// =============================================================================
// WEBHOOK SYSTEM
// =============================================================================

model Webhook {
  id     String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   String
  url    String
  secret String?
  events WebhookEvent[]
  status WebhookStatus   @default(ACTIVE)
  
  // Content type filtering
  contentTypeIds String[] @db.Uuid
  
  // Relations
  tenantId   String? @db.Uuid
  tenant     Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("webhooks")
  @@index([tenantId])
  @@index([status])
}

model WebhookDelivery {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  timestamp  DateTime @default(now())
  success    Boolean
  statusCode Int?
  request    String   @db.Text
  response   String?  @db.Text
  error      String?  @db.Text
  
  // Relations
  webhookId String  @db.Uuid
  webhook   Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@map("webhook_deliveries")
  @@index([webhookId])
  @@index([timestamp])
  @@index([success])
}

// =============================================================================
// PLUGIN SYSTEM
// =============================================================================

model Plugin {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  slug        String       @unique
  description String?
  version     String
  author      String?
  repository  String?
  homepage    String?
  license     String?
  main        String
  status      PluginStatus @default(INACTIVE)
  isSystem    Boolean      @default(false)
  
  // Configuration and metadata
  config       Json     @default("{}")
  hooks        String[] @default([])
  dependencies Json     @default("{}")
  
  // Error tracking
  lastErrorAt    DateTime?
  errorMessage   String?
  lastEnabledAt  DateTime?
  lastDisabledAt DateTime?
  
  // Relations
  fieldTypes FieldType[]
  
  // Audit fields
  installedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("plugins")
  @@index([slug])
  @@index([status])
  @@index([isSystem])
}

// =============================================================================
// ROUTE MANAGEMENT
// =============================================================================

model Route {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path        String
  method      RouteMethod
  target      String
  status      RouteStatus @default(ACTIVE)
  description String?
  isPublic    Boolean     @default(false)
  
  // Advanced configuration stored as JSONB
  rateLimit      Json?
  caching        Json?
  transformation Json?
  
  // Multi-tenant
  tenantId String? @db.Uuid
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([path, method, tenantId])
  @@map("routes")
  @@index([tenantId])
  @@index([status])
  @@index([method])
}

// =============================================================================
// TRANSLATION SYSTEM
// =============================================================================

model Translation {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  locale    String
  namespace String @default("common")
  key       String
  value     String @db.Text
  
  // Additional translation fields
  description String?
  isPlural    Boolean? @default(false)
  pluralForms Json?    // Store as JSON for flexibility
  variables   Json?    // Store as JSON array
  metadata    Json?    // Store as JSON object
  
  // Multi-tenant
  tenantId String? @db.Uuid
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([locale, namespace, key, tenantId])
  @@map("translations")
  @@index([locale])
  @@index([namespace])
  @@index([tenantId])
}

model TranslationMemory {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sourceText  String
  targetText  String
  sourceLocale String
  targetLocale String
  similarity  Float    @default(1.0)
  context     String?
  metadata    Json?
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("translation_memory")
  @@index([sourceLocale, targetLocale])
  @@index([sourceText])
  @@index([similarity])
}

// =============================================================================
// ENUMS
// =============================================================================

enum TenantPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  PENDING
  ARCHIVED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum ApiKeyScope {
  READ
  WRITE
  ADMIN
}

enum FieldDataType {
  STRING
  TEXT
  RICH_TEXT
  NUMBER
  INTEGER
  FLOAT
  BOOLEAN
  DATE
  DATETIME
  EMAIL
  URL
  IMAGE
  FILE
  REFERENCE
  JSON
  ARRAY
  COMPONENT
  ENUM
  COLOR
  GEO_POINT
  RELATION
  CUSTOM
}

enum FieldUIType {
  TEXT_INPUT
  TEXT_AREA
  RICH_TEXT_EDITOR
  NUMBER_INPUT
  CHECKBOX
  TOGGLE
  DATE_PICKER
  DATE_TIME_PICKER
  EMAIL_INPUT
  URL_INPUT
  IMAGE_UPLOADER
  FILE_UPLOADER
  REFERENCE_SELECTOR
  JSON_EDITOR
  ARRAY_EDITOR
  COMPONENT_EDITOR
  SELECT
  MULTI_SELECT
  RADIO_GROUP
  COLOR_PICKER
  MAP
  RELATION_EDITOR
  CUSTOM_UI
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentVersionStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum WorkflowEntryStatus {
  IN_PROGRESS
  APPROVED
  REJECTED
  CANCELED
}

enum WebhookEvent {
  CONTENT_CREATED
  CONTENT_UPDATED
  CONTENT_DELETED
  CONTENT_PUBLISHED
  CONTENT_UNPUBLISHED
  CONTENT_ARCHIVED
  MEDIA_UPLOADED
  MEDIA_UPDATED
  MEDIA_DELETED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  WORKFLOW_STARTED
  WORKFLOW_COMPLETED
  WORKFLOW_STEP_COMPLETED
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
}

enum PluginStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum RouteMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
  ALL
}

enum RouteStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

// =============================================================================
// JOB SCHEDULER SYSTEM
// =============================================================================

model Job {
  id              String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  type            String     // "cron" | "immediate" | "scheduled"
  status          JobStatus  @default(PENDING)
  cronExpression  String?
  data            Json?
  result          Json?
  error           String?
  scheduledFor    DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  nextRunAt       DateTime?
  lastRunAt       DateTime?
  runCount        Int        @default(0)
  maxRuns         Int?
  retryCount      Int        @default(0)
  maxRetries      Int        @default(3)
  priority        Int        @default(0)
  tags            String[]   @default([])
  runImmediately  Boolean    @default(false)

  // Relations
  createdById String? @db.Uuid
  createdBy   User?   @relation("JobCreator", fields: [createdById], references: [id])

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([status])
  @@index([nextRunAt])
  @@index([priority])
  @@index([tags])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
